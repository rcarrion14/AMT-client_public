/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace LoanProtocol {
  export type LoanStruct = {
    amountBorrowed: PromiseOrValue<BigNumberish>;
    collateralLocked: PromiseOrValue<BigNumberish>;
    loanTimestamp: PromiseOrValue<BigNumberish>;
    loanPrice: PromiseOrValue<BigNumberish>;
    loanRatio: PromiseOrValue<BigNumberish>;
    priceFeeder: PromiseOrValue<string>;
  };

  export type LoanStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    amountBorrowed: BigNumber;
    collateralLocked: BigNumber;
    loanTimestamp: BigNumber;
    loanPrice: BigNumber;
    loanRatio: BigNumber;
    priceFeeder: string;
  };
}

export interface LoanProtocolInterface extends utils.Interface {
  functions: {
    "charge(uint256)": FunctionFragment;
    "closeLoan(uint256,uint256)": FunctionFragment;
    "createLoan(uint256)": FunctionFragment;
    "emergencyStop()": FunctionFragment;
    "getPriceFeederAddress()": FunctionFragment;
    "getUserLoans(address)": FunctionFragment;
    "isLoanLiquidable(uint256,address)": FunctionFragment;
    "liquidateLoan(uint256,address)": FunctionFragment;
    "loanRatio()": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "resumeOperations()": FunctionFragment;
    "setLoanRatio(uint256)": FunctionFragment;
    "setPauseAdmin(address)": FunctionFragment;
    "setPriceFeeder(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "userLoans(address,uint256)": FunctionFragment;
    "withdrawlUsdt(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "charge"
      | "closeLoan"
      | "createLoan"
      | "emergencyStop"
      | "getPriceFeederAddress"
      | "getUserLoans"
      | "isLoanLiquidable"
      | "liquidateLoan"
      | "loanRatio"
      | "owner"
      | "paused"
      | "renounceOwnership"
      | "resumeOperations"
      | "setLoanRatio"
      | "setPauseAdmin"
      | "setPriceFeeder"
      | "transferOwnership"
      | "userLoans"
      | "withdrawlUsdt"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "charge",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "closeLoan",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createLoan",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyStop",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceFeederAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserLoans",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isLoanLiquidable",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateLoan",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "loanRatio", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resumeOperations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setLoanRatio",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPauseAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceFeeder",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "userLoans",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawlUsdt",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "charge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "closeLoan", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createLoan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyStop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceFeederAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserLoans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLoanLiquidable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "loanRatio", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resumeOperations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLoanRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPauseAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceFeeder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userLoans", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawlUsdt",
    data: BytesLike
  ): Result;

  events: {
    "LoanClosed(address,uint256,uint256)": EventFragment;
    "LoanCreated(address,uint256,uint256)": EventFragment;
    "LoanPartialClosed(address,uint256,uint256)": EventFragment;
    "LoanRatioChanged(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "PriceFeederChanged(address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LoanClosed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LoanCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LoanPartialClosed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LoanRatioChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceFeederChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface LoanClosedEventObject {
  user: string;
  repaidAmount: BigNumber;
  collateralReturned: BigNumber;
}
export type LoanClosedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  LoanClosedEventObject
>;

export type LoanClosedEventFilter = TypedEventFilter<LoanClosedEvent>;

export interface LoanCreatedEventObject {
  user: string;
  borrowedAmount: BigNumber;
  collateralAmount: BigNumber;
}
export type LoanCreatedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  LoanCreatedEventObject
>;

export type LoanCreatedEventFilter = TypedEventFilter<LoanCreatedEvent>;

export interface LoanPartialClosedEventObject {
  user: string;
  repaidAmount: BigNumber;
  collateralReturned: BigNumber;
}
export type LoanPartialClosedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  LoanPartialClosedEventObject
>;

export type LoanPartialClosedEventFilter =
  TypedEventFilter<LoanPartialClosedEvent>;

export interface LoanRatioChangedEventObject {
  newLoanRatio: BigNumber;
}
export type LoanRatioChangedEvent = TypedEvent<
  [BigNumber],
  LoanRatioChangedEventObject
>;

export type LoanRatioChangedEventFilter =
  TypedEventFilter<LoanRatioChangedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface PriceFeederChangedEventObject {
  newPriceFeeder: string;
}
export type PriceFeederChangedEvent = TypedEvent<
  [string],
  PriceFeederChangedEventObject
>;

export type PriceFeederChangedEventFilter =
  TypedEventFilter<PriceFeederChangedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface LoanProtocol extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LoanProtocolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    charge(
      snapId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    closeLoan(
      loanIndex: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createLoan(
      amtAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emergencyStop(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getPriceFeederAddress(overrides?: CallOverrides): Promise<[string]>;

    getUserLoans(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [LoanProtocol.LoanStructOutput[]] & {
        loans: LoanProtocol.LoanStructOutput[];
      }
    >;

    isLoanLiquidable(
      loanIndex: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    liquidateLoan(
      loanIndex: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    loanRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resumeOperations(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLoanRatio(
      _loanRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPauseAdmin(
      newPauseAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPriceFeeder(
      _priceFeeder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userLoans(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
        amountBorrowed: BigNumber;
        collateralLocked: BigNumber;
        loanTimestamp: BigNumber;
        loanPrice: BigNumber;
        loanRatio: BigNumber;
        priceFeeder: string;
      }
    >;

    withdrawlUsdt(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  charge(
    snapId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  closeLoan(
    loanIndex: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createLoan(
    amtAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emergencyStop(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getPriceFeederAddress(overrides?: CallOverrides): Promise<string>;

  getUserLoans(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<LoanProtocol.LoanStructOutput[]>;

  isLoanLiquidable(
    loanIndex: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  liquidateLoan(
    loanIndex: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  loanRatio(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resumeOperations(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLoanRatio(
    _loanRatio: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPauseAdmin(
    newPauseAdmin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPriceFeeder(
    _priceFeeder: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userLoans(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
      amountBorrowed: BigNumber;
      collateralLocked: BigNumber;
      loanTimestamp: BigNumber;
      loanPrice: BigNumber;
      loanRatio: BigNumber;
      priceFeeder: string;
    }
  >;

  withdrawlUsdt(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    charge(
      snapId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    closeLoan(
      loanIndex: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createLoan(
      amtAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyStop(overrides?: CallOverrides): Promise<void>;

    getPriceFeederAddress(overrides?: CallOverrides): Promise<string>;

    getUserLoans(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<LoanProtocol.LoanStructOutput[]>;

    isLoanLiquidable(
      loanIndex: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    liquidateLoan(
      loanIndex: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    loanRatio(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    resumeOperations(overrides?: CallOverrides): Promise<void>;

    setLoanRatio(
      _loanRatio: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPauseAdmin(
      newPauseAdmin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceFeeder(
      _priceFeeder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    userLoans(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
        amountBorrowed: BigNumber;
        collateralLocked: BigNumber;
        loanTimestamp: BigNumber;
        loanPrice: BigNumber;
        loanRatio: BigNumber;
        priceFeeder: string;
      }
    >;

    withdrawlUsdt(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "LoanClosed(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      repaidAmount?: null,
      collateralReturned?: null
    ): LoanClosedEventFilter;
    LoanClosed(
      user?: PromiseOrValue<string> | null,
      repaidAmount?: null,
      collateralReturned?: null
    ): LoanClosedEventFilter;

    "LoanCreated(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      borrowedAmount?: null,
      collateralAmount?: null
    ): LoanCreatedEventFilter;
    LoanCreated(
      user?: PromiseOrValue<string> | null,
      borrowedAmount?: null,
      collateralAmount?: null
    ): LoanCreatedEventFilter;

    "LoanPartialClosed(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      repaidAmount?: null,
      collateralReturned?: null
    ): LoanPartialClosedEventFilter;
    LoanPartialClosed(
      user?: PromiseOrValue<string> | null,
      repaidAmount?: null,
      collateralReturned?: null
    ): LoanPartialClosedEventFilter;

    "LoanRatioChanged(uint256)"(
      newLoanRatio?: null
    ): LoanRatioChangedEventFilter;
    LoanRatioChanged(newLoanRatio?: null): LoanRatioChangedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "PriceFeederChanged(address)"(
      newPriceFeeder?: null
    ): PriceFeederChangedEventFilter;
    PriceFeederChanged(newPriceFeeder?: null): PriceFeederChangedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    charge(
      snapId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    closeLoan(
      loanIndex: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createLoan(
      amtAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emergencyStop(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getPriceFeederAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getUserLoans(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isLoanLiquidable(
      loanIndex: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidateLoan(
      loanIndex: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    loanRatio(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resumeOperations(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLoanRatio(
      _loanRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPauseAdmin(
      newPauseAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPriceFeeder(
      _priceFeeder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userLoans(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawlUsdt(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    charge(
      snapId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    closeLoan(
      loanIndex: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createLoan(
      amtAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emergencyStop(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getPriceFeederAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserLoans(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isLoanLiquidable(
      loanIndex: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidateLoan(
      loanIndex: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    loanRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resumeOperations(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLoanRatio(
      _loanRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPauseAdmin(
      newPauseAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPriceFeeder(
      _priceFeeder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userLoans(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawlUsdt(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
